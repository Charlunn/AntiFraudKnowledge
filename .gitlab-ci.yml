stages:
  - deploy

variables:
  # 定义通用变量
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  MYSQL_PASSWORD: $GITLAB_MYSQL_PASSWORD # 从 GitLab CI/CD Variables 获取
  MYSQL_ROOT_PASSWORD: $GITLAB_MYSQL_ROOT_PASSWORD # 从 GitLab CI/CD Variables 获取
  NEO4J_PASSWORD: $GITLAB_NEO4J_PASSWORD # 从 GitLab CI/CD Variables 获取
  MYSQL_DATABASE: mydatabase
  MYSQL_USER: myuser
  BACKEND_PORT_CONTAINER: 8000
  FRONTEND_PORT_CONTAINER: 3000

# --- 隐藏 Job 模板：定义通用配置 ---
.job_template: &job_definition
  image: docker/compose:latest
  tags:
    - docker-deploy-runner # 确保这个 tag 和你的 Runner 配置一致
  before_script:
    - echo "Deploying branch: ${CI_COMMIT_BRANCH}"
    - echo "Environment suffix: ${ENV_SUFFIX}"
    - echo "Using Compose project name: ${COMPOSE_PROJECT_NAME}"
    # 可以在这里 export 变量，但通常 Runner 会自动传递
  after_script:
    - echo "Cleaning up old images..."
    - docker image prune -f

# --- Master 分支的 Jobs ---

deploy_frontend_master:
  <<: *job_definition # 继承模板
  stage: deploy
  script:
    - echo "Building/Updating frontend for master..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} build frontend
    - echo "Restarting frontend service for master..."
    # --force-recreate 确保使用新镜像（如果 build 产生了新镜像）
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate frontend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"'
      changes:
        - frontend/**/*
        - docker-compose.yml
      variables: &master_vars # 定义 master 变量锚点
        ENV_SUFFIX: "master"
        COMPOSE_PROJECT_NAME: "myapp_master"
        FRONTEND_PORT_HOST: "3000"
        BACKEND_PORT_HOST: "8000"
        MYSQL_PORT_HOST: "3306"
        NEO4J_HTTP_PORT_HOST: "7474"
        NEO4J_BOLT_PORT_HOST: "7687"
        NETWORK_NAME: "master_network"
        NODE_MODULES_VOLUME_NAME: "node_modules_master"
        MYSQL_DATA_VOLUME: "mysql_data_master"
        NEO4J_DATA_VOLUME: "neo4j_data_master"

deploy_backend_master:
  <<: *job_definition
  stage: deploy
  script:
    - echo "Building/Updating backend for master..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} build backend
    - echo "Running database migrations for master..."
    # 确保 DB 服务启动，再执行迁移
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d mysql_${ENV_SUFFIX} neo4j_${ENV_SUFFIX}
    - sleep 10 # 等待 DB 服务启动
    - docker-compose -p ${COMPOSE_PROJECT_NAME} exec -T backend python manage.py migrate --noinput
    - echo "Restarting backend service for master..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate backend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"'
      changes:
        - backend/**/*
        - docker-compose.yml
      variables:
        <<: *master_vars # 复用 master 变量

apply_compose_changes_master:
  <<: *job_definition
  stage: deploy
  script:
    - echo "Applying docker-compose.yml changes for master..."
    # docker-compose up 会处理所有服务的变更
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"'
      changes:
        - docker-compose.yml
      variables:
        <<: *master_vars

# --- Dev 分支的 Jobs ---

deploy_frontend_dev:
  <<: *job_definition
  stage: deploy
  script:
    - echo "Building/Updating frontend for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} build frontend
    - echo "Restarting frontend service for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate frontend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "dev"'
      changes:
        - frontend/**/*
        - docker-compose.yml
      variables: &dev_vars # 定义 dev 变量锚点
        ENV_SUFFIX: "dev"
        COMPOSE_PROJECT_NAME: "myapp_dev"
        FRONTEND_PORT_HOST: "3001"
        BACKEND_PORT_HOST: "8001"
        MYSQL_PORT_HOST: "3307"
        NEO4J_HTTP_PORT_HOST: "7475"
        NEO4J_BOLT_PORT_HOST: "7688"
        NETWORK_NAME: "dev_network"
        NODE_MODULES_VOLUME_NAME: "node_modules_dev"
        MYSQL_DATA_VOLUME: "mysql_data_dev"
        NEO4J_DATA_VOLUME: "neo4j_data_dev"

deploy_backend_dev:
  <<: *job_definition
  stage: deploy
  script:
    - echo "Building/Updating backend for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} build backend
    - echo "Running database migrations for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d mysql_${ENV_SUFFIX} neo4j_${ENV_SUFFIX}
    - sleep 10
    - docker-compose -p ${COMPOSE_PROJECT_NAME} exec -T backend python manage.py migrate --noinput
    - echo "Restarting backend service for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate backend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "dev"'
      changes:
        - backend/**/*
        - docker-compose.yml
      variables:
        <<: *dev_vars # 复用 dev 变量

apply_compose_changes_dev:
  <<: *job_definition
  stage: deploy
  script:
    - echo "Applying docker-compose.yml changes for dev..."
    - docker-compose -p ${COMPOSE_PROJECT_NAME} up -d --remove-orphans --force-recreate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "dev"'
      changes:
        - docker-compose.yml
      variables:
        <<: *dev_vars