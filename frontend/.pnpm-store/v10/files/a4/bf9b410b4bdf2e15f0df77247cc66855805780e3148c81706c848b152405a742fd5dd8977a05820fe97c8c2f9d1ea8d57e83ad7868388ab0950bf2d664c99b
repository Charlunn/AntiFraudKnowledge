import { type PropType } from 'vue';
import type { Option, Theme, InitOptions, UpdateOptions } from '../types.js';
import { type EChartsElement } from '../utils/wc.js';
import '#build/echarts.mjs';
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    loading: BooleanConstructor;
    loadingOptions: PropType<import("../types").LoadingOptions>;
    autoresize: PropType<boolean | {
        throttle?: number;
        onResize?: ResizeObserverCallback;
    }>;
    option: PropType<Option>;
    theme: {
        type: PropType<Theme>;
    };
    initOptions: PropType<InitOptions>;
    updateOptions: PropType<UpdateOptions>;
    group: StringConstructor;
    manualUpdate: BooleanConstructor;
}>, {
    getWidth: () => number;
    getHeight: () => number;
    getDom: () => HTMLElement;
    getOption: () => import("echarts/core").EChartsCoreOption;
    resize: (opts?: import("echarts/core").ResizeOpts) => void;
    dispatchAction: (payload: import("echarts/core").Payload, opt?: boolean | {
        silent?: boolean;
        flush?: boolean | undefined;
    }) => void;
    convertToPixel: {
        (finder: string | {
            seriesIndex?: number | false | number[] | "none" | "all";
            seriesId?: (string | number) | (string | number)[];
            seriesName?: (string | number) | (string | number)[];
            geoIndex?: number | false | number[] | "none" | "all";
            geoId?: (string | number) | (string | number)[];
            geoName?: (string | number) | (string | number)[];
            bmapIndex?: number | false | number[] | "none" | "all";
            bmapId?: (string | number) | (string | number)[];
            bmapName?: (string | number) | (string | number)[];
            xAxisIndex?: number | false | number[] | "none" | "all";
            xAxisId?: (string | number) | (string | number)[];
            xAxisName?: (string | number) | (string | number)[];
            yAxisIndex?: number | false | number[] | "none" | "all";
            yAxisId?: (string | number) | (string | number)[];
            yAxisName?: (string | number) | (string | number)[];
            gridIndex?: number | false | number[] | "none" | "all";
            gridId?: (string | number) | (string | number)[];
            gridName?: (string | number) | (string | number)[];
            dataIndex?: number;
            dataIndexInside?: number;
        }, value: (string | number) | Date): number;
        (finder: string | {
            seriesIndex?: number | false | number[] | "none" | "all";
            seriesId?: (string | number) | (string | number)[];
            seriesName?: (string | number) | (string | number)[];
            geoIndex?: number | false | number[] | "none" | "all";
            geoId?: (string | number) | (string | number)[];
            geoName?: (string | number) | (string | number)[];
            bmapIndex?: number | false | number[] | "none" | "all";
            bmapId?: (string | number) | (string | number)[];
            bmapName?: (string | number) | (string | number)[];
            xAxisIndex?: number | false | number[] | "none" | "all";
            xAxisId?: (string | number) | (string | number)[];
            xAxisName?: (string | number) | (string | number)[];
            yAxisIndex?: number | false | number[] | "none" | "all";
            yAxisId?: (string | number) | (string | number)[];
            yAxisName?: (string | number) | (string | number)[];
            gridIndex?: number | false | number[] | "none" | "all";
            gridId?: (string | number) | (string | number)[];
            gridName?: (string | number) | (string | number)[];
            dataIndex?: number;
            dataIndexInside?: number;
        }, value: ((string | number) | Date)[]): number[];
    };
    convertFromPixel: {
        (finder: string | {
            seriesIndex?: number | false | number[] | "none" | "all";
            seriesId?: (string | number) | (string | number)[];
            seriesName?: (string | number) | (string | number)[];
            geoIndex?: number | false | number[] | "none" | "all";
            geoId?: (string | number) | (string | number)[];
            geoName?: (string | number) | (string | number)[];
            bmapIndex?: number | false | number[] | "none" | "all";
            bmapId?: (string | number) | (string | number)[];
            bmapName?: (string | number) | (string | number)[];
            xAxisIndex?: number | false | number[] | "none" | "all";
            xAxisId?: (string | number) | (string | number)[];
            xAxisName?: (string | number) | (string | number)[];
            yAxisIndex?: number | false | number[] | "none" | "all";
            yAxisId?: (string | number) | (string | number)[];
            yAxisName?: (string | number) | (string | number)[];
            gridIndex?: number | false | number[] | "none" | "all";
            gridId?: (string | number) | (string | number)[];
            gridName?: (string | number) | (string | number)[];
            dataIndex?: number;
            dataIndexInside?: number;
        }, value: number): number;
        (finder: string | {
            seriesIndex?: number | false | number[] | "none" | "all";
            seriesId?: (string | number) | (string | number)[];
            seriesName?: (string | number) | (string | number)[];
            geoIndex?: number | false | number[] | "none" | "all";
            geoId?: (string | number) | (string | number)[];
            geoName?: (string | number) | (string | number)[];
            bmapIndex?: number | false | number[] | "none" | "all";
            bmapId?: (string | number) | (string | number)[];
            bmapName?: (string | number) | (string | number)[];
            xAxisIndex?: number | false | number[] | "none" | "all";
            xAxisId?: (string | number) | (string | number)[];
            xAxisName?: (string | number) | (string | number)[];
            yAxisIndex?: number | false | number[] | "none" | "all";
            yAxisId?: (string | number) | (string | number)[];
            yAxisName?: (string | number) | (string | number)[];
            gridIndex?: number | false | number[] | "none" | "all";
            gridId?: (string | number) | (string | number)[];
            gridName?: (string | number) | (string | number)[];
            dataIndex?: number;
            dataIndexInside?: number;
        }, value: number[]): number[];
    };
    containPixel: (finder: string | {
        seriesIndex?: number | false | number[] | "none" | "all";
        seriesId?: (string | number) | (string | number)[];
        seriesName?: (string | number) | (string | number)[];
        geoIndex?: number | false | number[] | "none" | "all";
        geoId?: (string | number) | (string | number)[];
        geoName?: (string | number) | (string | number)[];
        bmapIndex?: number | false | number[] | "none" | "all";
        bmapId?: (string | number) | (string | number)[];
        bmapName?: (string | number) | (string | number)[];
        xAxisIndex?: number | false | number[] | "none" | "all";
        xAxisId?: (string | number) | (string | number)[];
        xAxisName?: (string | number) | (string | number)[];
        yAxisIndex?: number | false | number[] | "none" | "all";
        yAxisId?: (string | number) | (string | number)[];
        yAxisName?: (string | number) | (string | number)[];
        gridIndex?: number | false | number[] | "none" | "all";
        gridId?: (string | number) | (string | number)[];
        gridName?: (string | number) | (string | number)[];
        dataIndex?: number;
        dataIndexInside?: number;
    }, value: number[]) => boolean;
    getDataURL: (opts?: {
        type?: "png" | "jpeg" | "svg";
        pixelRatio?: number;
        backgroundColor?: import("echarts/core").Color;
        excludeComponents?: string[];
    }) => string;
    getConnectedDataURL: (opts?: {
        type?: "png" | "jpeg" | "svg";
        pixelRatio?: number;
        backgroundColor?: import("echarts/core").Color;
        connectedBackgroundColor?: import("echarts/core").Color;
        excludeComponents?: string[];
    }) => string;
    appendData: (params: {
        seriesIndex: number;
        data: any;
    }) => void;
    clear: () => void;
    isDisposed: () => boolean;
    dispose: () => void;
    chart: import("vue").ShallowRef<import("echarts/core").ECharts | undefined, import("echarts/core").ECharts | undefined>;
    root: import("vue").ShallowRef<EChartsElement | undefined, EChartsElement | undefined>;
    setOption: (option: Option, updateOptions?: UpdateOptions) => void;
    realAttrs: import("vue").ComputedRef<{
        [x: string]: any;
    }>;
    nativeListeners: import("vue").ShallowRef<Record<string, unknown>, Record<string, unknown>>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (params: import("echarts/core").ECElementEvent) => void;
    dblclick: (params: import("echarts/core").ECElementEvent) => void;
    mouseout: (params: import("echarts/core").ECElementEvent) => void;
    mouseover: (params: import("echarts/core").ECElementEvent) => void;
    mouseup: (params: import("echarts/core").ECElementEvent) => void;
    mousedown: (params: import("echarts/core").ECElementEvent) => void;
    mousemove: (params: import("echarts/core").ECElementEvent) => void;
    contextmenu: (params: import("echarts/core").ECElementEvent) => void;
    globalout: (params: import("echarts/core").ECElementEvent) => void;
} & {
    highlight: (params: any) => void;
    downplay: (params: any) => void;
    selectchanged: (params: any) => void;
    legendselectchanged: (params: any) => void;
    legendselected: (params: any) => void;
    legendunselected: (params: any) => void;
    legendselectall: (params: any) => void;
    legendinverseselect: (params: any) => void;
    legendscroll: (params: any) => void;
    datazoom: (params: any) => void;
    datarangeselected: (params: any) => void;
    graphroam: (params: any) => void;
    georoam: (params: any) => void;
    treeroam: (params: any) => void;
    timelinechanged: (params: any) => void;
    timelineplaychanged: (params: any) => void;
    restore: (params: any) => void;
    dataviewchanged: (params: any) => void;
    magictypechanged: (params: any) => void;
    geoselectchanged: (params: any) => void;
    geoselected: (params: any) => void;
    geounselected: (params: any) => void;
    axisareaselected: (params: any) => void;
    brush: (params: any) => void;
    brushEnd: (params: any) => void;
    brushselected: (params: any) => void;
    globalcursortaken: (params: any) => void;
} & {
    rendered: (params: {
        elapsedTime: number;
    }) => void;
    finished: () => void;
} & {
    "zr:mousewheel": (params: import("echarts/core").ElementEvent) => void;
    "zr:drag": (params: import("echarts/core").ElementEvent) => void;
    "zr:dragstart": (params: import("echarts/core").ElementEvent) => void;
    "zr:dragend": (params: import("echarts/core").ElementEvent) => void;
    "zr:dragenter": (params: import("echarts/core").ElementEvent) => void;
    "zr:dragleave": (params: import("echarts/core").ElementEvent) => void;
    "zr:dragover": (params: import("echarts/core").ElementEvent) => void;
    "zr:drop": (params: import("echarts/core").ElementEvent) => void;
    "zr:click": (params: import("echarts/core").ElementEvent) => void;
    "zr:dblclick": (params: import("echarts/core").ElementEvent) => void;
    "zr:mouseout": (params: import("echarts/core").ElementEvent) => void;
    "zr:mouseover": (params: import("echarts/core").ElementEvent) => void;
    "zr:mouseup": (params: import("echarts/core").ElementEvent) => void;
    "zr:mousedown": (params: import("echarts/core").ElementEvent) => void;
    "zr:mousemove": (params: import("echarts/core").ElementEvent) => void;
    "zr:contextmenu": (params: import("echarts/core").ElementEvent) => void;
    "zr:globalout": (params: import("echarts/core").ElementEvent) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    loading: BooleanConstructor;
    loadingOptions: PropType<import("../types").LoadingOptions>;
    autoresize: PropType<boolean | {
        throttle?: number;
        onResize?: ResizeObserverCallback;
    }>;
    option: PropType<Option>;
    theme: {
        type: PropType<Theme>;
    };
    initOptions: PropType<InitOptions>;
    updateOptions: PropType<UpdateOptions>;
    group: StringConstructor;
    manualUpdate: BooleanConstructor;
}>> & Readonly<{
    onClick?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onDblclick?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onMouseout?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onMouseover?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onMouseup?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onMousedown?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onMousemove?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onContextmenu?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    onGlobalout?: ((params: import("echarts/core").ECElementEvent) => any) | undefined;
    "onZr:mousewheel"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:drag"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dragstart"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dragend"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dragenter"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dragleave"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dragover"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:drop"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:click"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:dblclick"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:mouseout"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:mouseover"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:mouseup"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:mousedown"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:mousemove"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:contextmenu"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    "onZr:globalout"?: ((params: import("echarts/core").ElementEvent) => any) | undefined;
    onHighlight?: ((params: any) => any) | undefined;
    onDownplay?: ((params: any) => any) | undefined;
    onSelectchanged?: ((params: any) => any) | undefined;
    onLegendselectchanged?: ((params: any) => any) | undefined;
    onLegendselected?: ((params: any) => any) | undefined;
    onLegendunselected?: ((params: any) => any) | undefined;
    onLegendselectall?: ((params: any) => any) | undefined;
    onLegendinverseselect?: ((params: any) => any) | undefined;
    onLegendscroll?: ((params: any) => any) | undefined;
    onDatazoom?: ((params: any) => any) | undefined;
    onDatarangeselected?: ((params: any) => any) | undefined;
    onGraphroam?: ((params: any) => any) | undefined;
    onGeoroam?: ((params: any) => any) | undefined;
    onTreeroam?: ((params: any) => any) | undefined;
    onTimelinechanged?: ((params: any) => any) | undefined;
    onTimelineplaychanged?: ((params: any) => any) | undefined;
    onRestore?: ((params: any) => any) | undefined;
    onDataviewchanged?: ((params: any) => any) | undefined;
    onMagictypechanged?: ((params: any) => any) | undefined;
    onGeoselectchanged?: ((params: any) => any) | undefined;
    onGeoselected?: ((params: any) => any) | undefined;
    onGeounselected?: ((params: any) => any) | undefined;
    onAxisareaselected?: ((params: any) => any) | undefined;
    onBrush?: ((params: any) => any) | undefined;
    onBrushEnd?: ((params: any) => any) | undefined;
    onBrushselected?: ((params: any) => any) | undefined;
    onGlobalcursortaken?: ((params: any) => any) | undefined;
    onRendered?: ((params: {
        elapsedTime: number;
    }) => any) | undefined;
    onFinished?: (() => any) | undefined;
}>, {
    manualUpdate: boolean;
    loading: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
